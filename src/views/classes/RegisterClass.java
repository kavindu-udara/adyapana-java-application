/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package views.classes;

import includes.MysqlConnection;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import java.sql.ResultSet;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kavindu
 */
public class RegisterClass extends javax.swing.JDialog {

    private Runnable reloadTableAction;
    private HashMap<String, String> subjectHashMap = new HashMap<>();
    private HashMap<String, String> teacherHashMap = new HashMap<>();

    /**
     * Creates new form RegisterClass
     */
    public RegisterClass(java.awt.Frame parent, boolean modal, Runnable reloadTableAction) {
        super(parent, modal);
        initComponents();
        this.reloadTableAction = reloadTableAction;
        loadSubjectsTableData();
        loadTimeSlotsTableData();
    }

    private void loadSubjectsTableData() {
        DefaultTableModel tableModel = (DefaultTableModel) subjectsTable.getModel();
        tableModel.setRowCount(0);
        try {
            ResultSet resultSet = MysqlConnection.executeSearch("SELECT * FROM `subjects`");
            while (resultSet.next()) {
                Vector vector = new Vector();
                vector.add(resultSet.getString("id"));
                vector.add(resultSet.getString("name"));
                vector.add(resultSet.getString("description"));
                vector.add(resultSet.getString("price"));

                tableModel.addRow(vector);
            }
            subjectsTable.setModel(tableModel);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadTeachersTableData(int subjectId) {
        DefaultTableModel tableModel = (DefaultTableModel) teachersTable.getModel();
        tableModel.setRowCount(0);
        try {
            ResultSet resultSet = MysqlConnection.executeSearch("SELECT * FROM `teacher_has_subject` WHERE `subject_id`='" + subjectId + "' ");
            while (resultSet.next()) {
                Vector vector = new Vector();

                ResultSet teacherResultSet = MysqlConnection.executeSearch("SELECT * FROM `teachers` WHERE `id`='" + resultSet.getInt("teacher_id") + "' ");
                if (teacherResultSet.next()) {
                    vector.add(teacherResultSet.getString("id"));
                    vector.add(teacherResultSet.getString("name"));
                }

                tableModel.addRow(vector);
            }
            teachersTable.setModel(tableModel);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadTimeSlotsTableData() {
        DefaultTableModel tableModel = (DefaultTableModel) timeslotsTable.getModel();
        tableModel.setRowCount(0);
        try {
            ResultSet resultSet = MysqlConnection.executeSearch("SELECT * FROM `timeslots`");
            while (resultSet.next()) {
                Vector vector = new Vector();
                vector.add(resultSet.getString("id"));
                vector.add(resultSet.getString("started_at"));
                vector.add(resultSet.getString("end_at"));

                tableModel.addRow(vector);
            }
            timeslotsTable.setModel(tableModel);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private boolean checkIsNameAlreadyExists(String name) {
        try {
            ResultSet resultSet = MysqlConnection.executeSearch("SELECT * FROM `classes` WHERE `name`='" + name + "' ");
            if (resultSet.next()) {
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        createButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        subjectsTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        teachersTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        timeslotsTable = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        classNameField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create Class");
        setResizable(false);

        jLabel1.setText("Select Subject");

        jLabel2.setText("Select Teacher");

        jLabel3.setText("Time Slot");

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        subjectsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "name", "description", "price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        subjectsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subjectsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(subjectsTable);

        teachersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(teachersTable);

        timeslotsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "start at", "end at"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(timeslotsTable);

        jButton3.setText("add new");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setText("name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(classNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(183, 183, 183)
                            .addComponent(jLabel2)
                            .addGap(179, 179, 179)
                            .addComponent(jLabel3))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(createButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(classNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(createButton)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        // TODO add your handling code here:

        int subjectRow = subjectsTable.getSelectedRow();
        int teacherRow = teachersTable.getSelectedRow();
        int timeSlotRow = timeslotsTable.getSelectedRow();
        String className = classNameField.getText();

        if (subjectRow > -1 && teacherRow > -1 && timeSlotRow > -1 && !className.equals("")) {
            int subjectId = Integer.parseInt(String.valueOf(subjectsTable.getValueAt(subjectRow, 0)));
            int teacherId = Integer.parseInt(String.valueOf(teachersTable.getValueAt(teacherRow, 0)));
            int timeSlotId = Integer.parseInt(String.valueOf(timeslotsTable.getValueAt(timeSlotRow, 0)));

            try {
                ResultSet checkResultSet = MysqlConnection.executeSearch("SELECT * FROM `classes` WHERE `subject_id`='" + subjectId + "' AND `teacher_id`='" + teacherId + "' AND `timeslots_id`='" + timeSlotId + "' ");
                if (checkResultSet.next()) {
                    JOptionPane.showMessageDialog(this, "class is already registered");
                } else {
                    if (checkIsNameAlreadyExists(className)) {
                        JOptionPane.showMessageDialog(this, "class name is already registered");
                        return;
                    }
                    MysqlConnection.executeIUD("INSERT INTO `classes`(`subject_id`, `teacher_id`, `timeslots_id`, `name`) VALUES ('" + subjectId + "', '" + teacherId + "', '" + timeSlotId + "', '" + className + "') ");
                    JOptionPane.showMessageDialog(this, "created");
                    reloadTableAction.run();
                    dispose();
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error : " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select at least one row of the all of tables");
        }
    }//GEN-LAST:event_createButtonActionPerformed

    private void subjectsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectsTableMouseClicked
        // TODO add your handling code here:
        int row = subjectsTable.getSelectedRow();
        int subjectId = Integer.parseInt(String.valueOf(subjectsTable.getValueAt(row, 0)));
        loadTeachersTableData(subjectId);
    }//GEN-LAST:event_subjectsTableMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        new RegisterTimeSlot(null, true, () -> {
            loadTimeSlotsTableData();
        }).setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField classNameField;
    private javax.swing.JButton createButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable subjectsTable;
    private javax.swing.JTable teachersTable;
    private javax.swing.JTable timeslotsTable;
    // End of variables declaration//GEN-END:variables
}
